(define-module (chap1 eval))

(define (evaluate e env)
  (if (atom? e)
      (cond ((symbol? e) (loopup e env))
	    ((or (number? e)(string? e)(char? e)(boolean? e)(vector? e))
	     e)
	    (else (wrong "Cannot evaluate" e)))
      (case (car e)
	((quote) (cadr e))
	((if) (if (evaluate (cadr e))
		  (evaluate (caddr e))
		  (evaluate (cadddr e))))
	((begin) (eprogn (cdr e) env))
	((set!) (update! (cadr e) env (evaluate (caddr e) env)))
	((lambda) (make-function (cadr e) (cddr e) env))
	(else (invoke (evaluate (car e) env)
		      (evlis (cdr e) env))))))

(define (eprogn exps env)
  (if (pair? exps)
      (if (pair? (cdr exps))
	  (begin (evaluate (car exps) env)
		 (eprogn (cdr exps) env))
	  (evaluate (car exps) env))
      '()))

(define (evlis exps env)
  (if (pair? exps)
      (cons (evaluate (car exps) env)
	    (evlis (cdr exps) env))
      '()))

(define (lookup id env)
  (if (pair? env)
      (if (eq? (caar env) id)
	  (cdar env)
	  (lookup id (cdr env)))
      (wrong "Nu such binding" id)))

(define (update! id env value)
  (if (pair? env)
      (if (eq? (caar env) id)
	  (begin (set-cdr! (car env) value)
		 value)
	  (update! id (cdr env) value))
      (wrong "No such binding" id)))


(define env.init '())

(define (extend env variables values)
  (cond ((pair? variables)
	 (if (pair? values)
	     (cons (cons (car variables) (car (values)))
		   (extend env (cdr variables) (cdr values)))
	     (wrong "Too less values"))
	 ((null? variables)
	  (if (null? values)
	      env
	      (wrong "Too much values")))
	 ((symbol? variables) (cons (cons variables values) env)))))
